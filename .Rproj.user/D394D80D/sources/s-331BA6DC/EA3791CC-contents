---
title: "findPvalueCutoff"
shorttitle: "Select Differentially Expressed Genes At False Positive Rate Less Than Five Percent"
author:
- name: "Vijaykumar Yogesh Muley"
  affiliation: 
  - Instituto de Neurobiología, Universidad Nacional Autónoma de México, Querétaro, Mexico
  email: vijay.muley@gmail.com
  
date: "`r Sys.Date()`"
output: 
  rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
library(knitr)

knitr::opts_chunk$set(echo = TRUE)
options(stringsAsFactors = FALSE);

opts_chunk$set(warning=FALSE, message=FALSE)

# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")


```

# Introduction

The findPvalueCutoff package is intended to use with p-values resulting from differential gene expression analysis tools to estimate a p-value cutoff at which false positive rate is expected to be less than five percent. Conventionally, adjusted p-value cutoff of 0.05 or less is used to selected differentially expressed genes. However, this cutoff is not necessarily right choice for results obtained gene expression datasets with different sample sizes of compared groups. The advantage with using findPvalueCutoff is that the p-value cutoff is predicted based on distribution of p-values itself by randomizing their order using sophisticated simulation based permutation resampling. This data-driven approach estimates p-value cutoff where one can expected five percent false positive error rate in detecting differentially expressed genes. In the subsequent text, the details are presented on how to compute false discovery rate at various p-value cutoff, and selection of differentially expressed genes.

## Contact

For questions regarding findPvalueCutoff, contact the author at vijay.muley\@gmail.com

# Getting started

Install findPvalueCutoff by typing in R:

Once installed you can load findPvalueCutoff into your workspace:


```{r}
library(findPvalueCutoff)
```


Note that this command has to be run every time you restart R in order to be able to use the
package. To get immediate help on findPvalueCutoff, type:


```{r}
?findPvalueCutoff
```

findPvalueCutoff function needs a vector of unocrrected p-values resulting from differential gene expression analysis tools. Some parameters need to be adjusted and details are giving below. 

# Estimating p-value cutoffs

I will use example data provided with the package, which contains output generated by differential gene expression analysis tools such as limma, edgeR or DEGseq. The following command will load the data which is a data.frame named pvalue


```{r}
data(pvalue)
```


To check first few lines you can type following commands


```{r}
head(pvalue)

```

There are two ways to run findPvalueCutoff. 1) use a vector of predefined p-value cutoffs or 2) set a lower and upper range and choose a interval so that this function generates a series of p-value cutoffs from lower to upper bound by increating the provided interval value. Lets see how first option works.

## Using predefined p-value thresholds

I set seed to a random number using set.seed function for reproducibile results. Then I run findPvalueCutoff by setting x paramater to differential expression values, threshold to manually selected p-value cutoffs at which I would like compute false positive rates, and the number of randomized datasets simulated to 100 but for real analysis it should set to at least 10000. I store results in the fdr object.

```{r}
set.seed(1979)
fdr <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 100)
```

These results can be ploted as follow
```{r, fig.cap = "False positive error rates predicted from random datasets according to the uncorrected differential expression p-values. The false positive error rate represents the ratio of the number of significant p-values from the randomized dataset (control experiment) to the number of significant p-values from the real dataset below a certain p-value. False positive error rate is close to 5 percent at p-value cutoff of 0.01."}

barplot(fdr, names = names(fdr), col =  "black", border = "white", xlab = "P-value cutoff", ylab = "False Positive Rate (in percent)")

```

## Using a range of pvalues at specific interval

It is also possible to provide a range of p-values with an interval to get an idea of p-value cutoff where it is more likely to find false positive rate as low as possible. To do that, you can choose a lower and upper bound of the p-value cutoff, and increment lower bound by a interval to get a series of p-value cutoffs within those bounds. Here I choose p-values lower bound of 0 to upper bound of 0.2, and increment by 0.02.

```{r}
set.seed(1979)
fdr <- findPvalueCutoff(x = pvalue$P.Value, range = c(0, 0.2), interval = 0.02, nsims = 100)
```

These results can be ploted as follow
```{r, out.width="50%", fig.cap = "False positive error rates predicted from random datasets according to the uncorrected differential expression p-values. The false positive error rate represents the ratio of the number of significant p-values from the randomized dataset (control experiment) to the number of significant p-values from the real dataset below a certain p-value. This plot gives an idea that false positive error rate is five perent or less between p-values 0 to 0.02. One can now use p-values between this range to get more finer false positive rate and corresponding p-value cutoff."}

barplot(fdr, names = names(fdr), col =  "black", border = "white", xlab = "P-value cutoff", ylab = "False Positive Rate (in percent)")

```

# Troubleshooting

---
title: "findPvalueCutoff"
shorttitle: "Select Differentially Expressed Genes At False Positive Rate Less Than Five Percent"
author:
- name: "Vijaykumar Yogesh Muley"
  affiliation: 
  - Instituto de Neurobiología, Universidad Nacional Autónoma de México, Querétaro, Mexico
  email: vijay.muley@gmail.com
  
date: "`r Sys.Date()`"
abstract: >
  Document summary
  
output: 
  BiocStyle::pdf_document
vignette: >
  %\VignetteIndexEntry{Vignette Title}
  %\VignetteEngine{knitr::knitr}
  \usepackage[utf8]{inputenc}
---


```{r style, echo = FALSE, results = 'asis'}
BiocStyle::markdown()
```

```{r setup, include=FALSE}

library(knitr)

knitr::opts_chunk$set(echo = TRUE)
options(stringsAsFactors = FALSE);

opts_chunk$set(warning=FALSE, message=FALSE)
set.seed(1979)

# install R/qtl package if necessary:
if(!require("qtl")) install.packages("qtl", repos="http://cran.us.r-project.org")


```

# Introduction

The findPvalueCutoff package is intended as use with p-values resulting from differential gene expression analysis to estimate a p-value cutoff at which false positive rate is expected to less than five percent. Conventionally, adjusted p-value cutoff of 0.05 or less is used to selected differentially expressed genes. However, this cutoff is not necessarily work with results obtained using large sample size gene expression datasets. Often, arbitrary cutoffs have been used to obtain desire results. The advantage with using findPvalueCutoff is that the p-value cutoff is chosen based on distribution of p-values itself by randomizing their order using sophistcated simulation based permutation resampling. This data-driven approach estimates p-value cutoff where one can expected five percent false positive rates in detecting differentially expressed genes. In the subsequent text, the details are presented on how to compute false discovery rate at various p-value cutoff, and selection of differentually exressed genes.

## Contact

For questions regarding findPvalueCutoff, contact the author at vijay.muley\@gmail.com

# Getting started

Install findPvalueCutoff by typing in R:

Once installed you can load findPvalueCutoff into your workspace:


```{r}
library(findPvalueCutoff)
```


Note that this command has to be run every time you restart R in order to be able to use the
package. To get immediate help on findPvalueCutoff, type:


```{r}
?findPvalueCutoff
```

findPvalueCutoff function needs a vector of unocrrected p-values resulting from differential gene expression analysis tools. Some parameters need to be adjusted and details are giving below. 

# Estimating p-value cutoffs

I will use example data provided with the package, which contains output generated by differential gene expression analysis tools such as limma, edgeR or DEGseq. The following command will load the data which is a data.frame named pvalue


```{r}
data(pvalue)
```


To check first few lines you can type following commands


```{r}
head(pvalue)

```

There are two ways to run findPvalueCutoff. 1) use a vector of predefined p-value cutoffs or 2) set a lower and upper range and choose a interval so that this function generates a series of p-value cutoffs from lower to upper bound by increating the provided interval value. Lets see how first option works.

# Using predefined p-value thresholds

I set seed to a random number using set.seed function for reproducibile results. Then I run findPvalueCutoff by setting x paramater to differential expression values, threshold to manually selected p-value cutoffs at which I would like compute false positive rates, and the number of randomized datasets simulated to 10000. I store results in the object.
```{r}
set.seed(1979)
fdr <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
```

These results can be 
```{r}
head(results)

```

Each column is a false positive rates at corrosponding p-value computed from 10000 randomization of the original p-values, which forms a permutation distribution. Mean of each permutation distribution can be used as false positive rate at a particular p-value cutoff as shown below. But one can also compute confidence interval of the distirubtion and use upper level as considence level.

```{r}
colMeans(results)
```
```{r}
head(pvalue)

```

```{r, include=FALSE}

SessionInfo()

```




if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
library(BiocManager)
BiocManager::install(c("MotifDb",  "GenomicFeatures",
"TxDb.Scerevisiae.UCSC.sacCer3.sgdGene",
"org.Sc.sgd.db", "BSgenome.Scerevisiae.UCSC.sacCer3",
"motifStack", "seqLogo"))
BiocManager::install("PWMEnrich")
BiocManager::install(c("PWMEnrich", "BSgenome.Hsapiens.UCSC.hg38", "BSgenome.Hsapiens.UCSC.hg38.masked",
"BSgenome.Mmusculus.UCSC.mm10", "BSgenome.Hsapiens.NCBI.GRCh38",
"TxDb.Hsapiens.UCSC.hg38.knownGene", "TxDb.Mmusculus.UCSC.mm10.knownGene"))
BiocManager::install("PWMEnrich.Hsapiens.background")
BiocManager::install("PWMEnrich.Mmusculus.background")
library(BSgenome.Hsapiens.NCBI.GRCh38)
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
BiocManager::install("BSgenome.Hsapiens.NCBI.GRCh38")
BiocManager::install("PWMEnrich")
BiocManager::install("PWMEnrich.Hsapiens.background")
BiocManager::install("PWMEnrich.Mmusculus.background")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
install.packages("~/Downloads/BSgenome.Hsapiens.UCSC.hg38.masked_1.3.993.tar", repos = NULL)
install.packages("~/Downloads/BSgenome.Hsapiens.UCSC.hg38_1.4.3.tar.gz.download", repos = NULL)
BiocManager::install(c("PWMEnrich", "BSgenome.Hsapiens.UCSC.hg38", "BSgenome.Hsapiens.UCSC.hg38.masked",
"BSgenome.Mmusculus.UCSC.mm10", "BSgenome.Hsapiens.NCBI.GRCh38",
"TxDb.Hsapiens.UCSC.hg38.knownGene", "TxDb.Mmusculus.UCSC.mm10.knownGene"))
install.packages("~/Downloads/BSgenome.Hsapiens.UCSC.hg38_1.4.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/BSgenome.Hsapiens.UCSC.hg38.masked_1.3.993.tar.gz", repos = NULL, type = "source")
library(Biobase)
library(WGCNA)
install.packages("WGCNA")
install.packages("impute")
library(GEOquery)
library(GEOquery)
library(limma)
library(Biobase)
library(affy)
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
if (!requireNamespace("GEOquery", quietly = TRUE))
install.packages("GEOquery")
library(GEOquery)
if (!requireNamespace("limma", quietly = TRUE))
install.packages("limma")
library(limma)
if (!requireNamespace("Biobase", quietly = TRUE))
install.packages("Biobase")
library(Biobase)
if (!requireNamespace("affy", quietly = TRUE))
install.packages("affy")
library(affy)
if (!requireNamespace("preprocessCore", quietly = TRUE))
install.packages("preprocessCore")
library(preprocessCore)
if (!requireNamespace("WGCNA", quietly = TRUE))
install.packages("WGCNA")
library(WGCNA)
allowWGCNAThreads()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
if (!requireNamespace("GEOquery", quietly = TRUE))
BiocManager::install("GEOquery")
library(GEOquery)
if (!requireNamespace("limma", quietly = TRUE))
BiocManager::install("limma")
library(limma)
if (!requireNamespace("Biobase", quietly = TRUE))
BiocManager::install("Biobase")
library(Biobase)
if (!requireNamespace("affy", quietly = TRUE))
BiocManager::install("affy")
if (!requireNamespace("org.Hs.eg.db", quietly = TRUE))
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
if (!requireNamespace("oligo", quietly = TRUE))
BiocManager::install("oligo")
library(oligo)
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db")
f1 <- function(p){
if (!requireNamespace(p, quietly = TRUE))
install.packages(p)
library(p)
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db")
sapply(packages, f1)
f1 <- function(p){
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(p)
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db")
sapply(packages, f1)
f1 <- function(p){
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(p)
}
f1 <- function(p){
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(p)
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db",
"hgu133a.db", "hthgu133adb", "hugene10sttranscriptcluster.db")
sapply(packages, f1)
f1 <- function(p){
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(paste(p, sep = "")
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db",
"hgu133a.db", "hthgu133adb", "hugene10sttranscriptcluster.db", )
sapply(packages, f1)
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db",
"hgu133a.db", "hthgu133adb", "hugene10sttranscriptcluster.db", )
f1 <- function(p){
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(paste(p, sep = "")
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db",
"hgu133a.db", "hthgu133adb", "hugene10sttranscriptcluster.db", )
options(stringsAsFactors = F)
options(digits = 3)
f1 <- function(p){
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
library(paste(p, sep = "")
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hugene20stprobeset.db", "hugene10sttranscriptcluster.db",
"hgu133a.db", "hthgu133adb", "hugene10sttranscriptcluster.db" )
sapply(packages, f1)
f1 <- function(p){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
print(p)
if (!requireNamespace(p, quietly = TRUE))
BiocManager::install(p)
}
packages <- c("hgu133plus2.db", "hgu133a2.db", "hgu133a.db", "hthgu133a.db", "hgu219.db", "GEOquery","limma","Biobase",
"hugene10sttranscriptcluster.db", "hugene20stprobeset.db", "hta20probeset.db",
"hgfocus.db", "hgu95av2.db", "hugene10sttranscriptcluster.db", "affy", "preprocessCore", "WGCNA", "org.Hs.eg.db", "oligo","AffyRNADegradation")
sapply(packages, f1)
sapply(packages, function(x) library(x))
sapply(packages, function(x) library(paste(x, sep = ""))
)
sapply(packages, function(x) library(cat(x)))
ids <- read.table("~/Downloads/gds_result.txt")$V1
ids
ids <- readLines("~/Downloads/gds_result.txt")
ids
ids <- readLines("~/Downloads/gds_result.txt")
ids <- ids[grep("Accession: GSE26594", ids, fixed = T)]
ids
ids <- readLines("~/Downloads/gds_result.txt")
ids <- ids[grep("Accession: GSE", ids, fixed = T)]
ids
ids <- strsplit2(ids, "\t")
ids
ids <- readLines("~/Downloads/gds_result.txt")
ids <- ids[grep("Accession: GSE", ids, fixed = T)]
ids <- strsplit2(ids, "\t")[,3]
ids
ids <- readLines("~/Downloads/gds_result.txt")
ids <- ids[grep("Accession: GSE", ids, fixed = T)]
ids <- gsub("Accession: ", "", strsplit2(ids, "\t")[,3])
ids
# Version info: R 3.2.3, Biobase 2.30.0, GEOquery 2.40.0, limma 3.26.8
################################################################
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE110226", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10379", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
# log2 transform
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
# box-and-whisker plot
par(mar=c(7,4,2,1))
title <- paste ("GSE110226", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
# expression value distribution plot
par(mar=c(4,4,2,1))
title <- paste ("GSE110226", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, main=title, legend=F)
# mean-variance trend
ex <- na.omit(ex) # eliminate rows with NAs
plotSA(lmFit(ex), main="Mean variance trend, GSE110226")
# UMAP plot (multi-dimensional scaling)
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 9, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=9", xlab="", ylab="", pch=20, cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE139384", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL10558", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
# log2 transform
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
# box-and-whisker plot
dev.new(width=3+ncol(gset)/6, height=5)
par(mar=c(7,4,2,1))
title <- paste ("GSE139384", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
dev.off()
# expression value distribution plot
par(mar=c(4,4,2,1))
title <- paste ("GSE139384", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, main=title, legend=F)
# mean-variance trend
ex <- na.omit(ex) # eliminate rows with NAs
plotSA(lmFit(ex), main="Mean variance trend, GSE139384")
# UMAP plot (multi-dimensional scaling)
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 14, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=14", xlab="", ylab="", pch=20, cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
library(WGCNA)
gset$`clinical phenotypes:ch1`
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "`clinical phenotypes:ch1`"], method="SANN", cex=0.6)
pData(gset)[rownames(ump$layout), "`clinical phenotypes:ch1`"]
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), `clinical phenotypes:ch1`], method="SANN", cex=0.6)
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "clinical phenotypes:ch1"], method="SANN", cex=0.6)
plot(ump$layout, main="UMAP plot, nbrs=14", xlab="", ylab="", pch=20, cex=1.5)
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "clinical phenotypes:ch1"], method="SANN", cex=0.6)
rownames(ump$layout)
ump <- umap(t(ex), n_neighbors = 3, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=14", xlab="", ylab="", pch=20, cex=1.5)
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "clinical phenotypes:ch1"], method="SANN", cex=0.6)
ump <- umap(t(ex), n_neighbors = 4, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=14", xlab="", ylab="", pch=20, cex=1.5)
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "clinical phenotypes:ch1"], method="SANN", cex=0.6)
ump <- umap(t(ex), n_neighbors = 5, random_state = 123)
pointLabel(ump$layout, labels = pData(gset)[rownames(ump$layout), "clinical phenotypes:ch1"], method="SANN", cex=0.6)
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
load("../data/pvalue.Rda")
head(pvalue)
findPvalueCutoff <- function(x = NULL, thresholds=NULL, range = c(0,1), interval = 0.05, nsims = 1000){
if(!is.numeric(x)){
cat("P-value should be numeric vector\n")
return()
}
if(is.null(thresholds)){
alpha <- seq(range[1], range[2], interval)
}
if(!is.null(thresholds)){
alpha <- thresholds
}
results <- sapply(1:nsims, function(n) sapply(alpha, function(z) sum(sample(x)[x<=z]<x[x<=z])))
observed <- sapply(alpha, function(j) sum(x<=j))
fdr <- results/observed
print(fdr)
rownames(fdr) <- alpha
colnames(fdr) <- 1:nsims
fdr <- t(fdr)
fdr[is.na(fdr)] <- 0
fdr[is.nan(fdr)] <- 0
return(fdr)
}
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head(results)
setwd("~/Documents/googlebackup/rpackages/findPvalueCutoff1/vignettes")
load("../data/pvalue.Rda")
head(pvalue)
findPvalueCutoff <- function(x = NULL, thresholds=NULL, range = c(0,1), interval = 0.05, nsims = 1000){
if(!is.numeric(x)){
cat("P-value should be numeric vector\n")
return()
}
if(is.null(thresholds)){
alpha <- seq(range[1], range[2], interval)
}
if(!is.null(thresholds)){
alpha <- thresholds
}
results <- sapply(1:nsims, function(n) sapply(alpha, function(z) sum(sample(x)[x<=z]<x[x<=z])))
observed <- sapply(alpha, function(j) sum(x<=j))
fdr <- results/observed
print(fdr)
rownames(fdr) <- alpha
colnames(fdr) <- 1:nsims
fdr <- t(fdr)
fdr[is.na(fdr)] <- 0
fdr[is.nan(fdr)] <- 0
return(fdr)
}
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head(results)
set.seed(1979)
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head(t(results))
head((results))
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
load("../data/pvalue.Rda")
head(pvalue)
set.seed(1979)
findPvalueCutoff <- function(x = NULL, thresholds=NULL, range = c(0,1), interval = 0.05, nsims = 1000){
if(!is.numeric(x)){
cat("P-value should be numeric vector\n")
return()
}
if(is.null(thresholds)){
alpha <- seq(range[1], range[2], interval)
}
if(!is.null(thresholds)){
alpha <- thresholds
}
results <- sapply(1:nsims, function(n) sapply(alpha, function(z) sum(sample(x)[x<=z]<x[x<=z])))
observed <- sapply(alpha, function(j) sum(x<=j))
fdr <- results/observed
print(fdr)
rownames(fdr) <- alpha
colnames(fdr) <- 1:nsims
fdr <- t(fdr)
fdr[is.na(fdr)] <- 0
fdr[is.nan(fdr)] <- 0
fdr
}
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
set.seed(1979)
findPvalueCutoff <- function(x = NULL, thresholds=NULL, range = c(0,1), interval = 0.05, nsims = 1000){
if(!is.numeric(x)){
cat("P-value should be numeric vector\n")
return()
}
if(is.null(thresholds)){
alpha <- seq(range[1], range[2], interval)
}
if(!is.null(thresholds)){
alpha <- thresholds
}
results <- sapply(1:nsims, function(n) sapply(alpha, function(z) sum(sample(x)[x<=z]<x[x<=z])))
observed <- sapply(alpha, function(j) sum(x<=j))
fdr <- results/observed
rownames(fdr) <- alpha
colnames(fdr) <- 1:nsims
fdr <- t(fdr)
fdr[is.na(fdr)] <- 0
fdr[is.nan(fdr)] <- 0
fdr
}
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
set.seed(1979)
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
set.seed(1979)
results <- findPvalueCutoff(x = pvalue$P.Value, thresholds = c(0.0001, 0.001, 0.01, 0.1, 0.15, 0.2), nsims = 10000)
head((results))
install.packages("~/Documents/googlebackup/rpackages/findPvalueCutoff_0.1.0.tar.gz", repos = NULL, type = "source")
library(findPvalueCutoff)
data(findPvalueCutoff)
data(pvalue)
install.packages("~/Documents/googlebackup/rpackages/findPvalueCutoff_0.1.0.tar.gz", repos = NULL, type = "source")
library(findPvalueCutoff)
library(findPvalueCutoff)
data(pvalue)
